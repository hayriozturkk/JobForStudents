// <auto-generated />
using System;
using JobForStudents;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobForStudents.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("JobForStudents.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "hayri.ozturk@sahabt.com",
                            Password = "123456",
                            RoleId = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            Email = "adem.simsek@sahabt.com",
                            Password = "987654",
                            RoleId = 2,
                            Visibility = false
                        },
                        new
                        {
                            Id = 3,
                            Email = "adem.simsek@sahabt.com",
                            Password = "987654",
                            RoleId = 2,
                            Visibility = false
                        },
                        new
                        {
                            Id = 4,
                            Email = "adem.simsek@sahabt.com",
                            Password = "987654",
                            RoleId = 2,
                            Visibility = false
                        },
                        new
                        {
                            Id = 5,
                            Email = "adem.simsek@sahabt.com",
                            Password = "987654",
                            RoleId = 1,
                            Visibility = false
                        });
                });

            modelBuilder.Entity("JobForStudents.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DistrictId = 1,
                            OpenAddress = "asdasdads"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            DistrictId = 2,
                            OpenAddress = "asdasdasdasdasdad"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 2,
                            DistrictId = 3,
                            OpenAddress = "asdasdadASDASD"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            DistrictId = 4,
                            OpenAddress = "ASDASDasdasdad"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 3,
                            DistrictId = 5,
                            OpenAddress = "asdasdadASDASD"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 3,
                            DistrictId = 6,
                            OpenAddress = "asASDSADdasdad"
                        });
                });

            modelBuilder.Entity("JobForStudents.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Elektrik Mühendisliği"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bilgisayar Mühendisliği"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yazılım Mühendisliği"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hizmet Sektörü"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Makina Mühendisliği"
                        });
                });

            modelBuilder.Entity("JobForStudents.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 2,
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 3,
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kocaeli"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sakarya"
                        });
                });

            modelBuilder.Entity("JobForStudents.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            CategoryId = 1,
                            Name = "Öztürk Mühendislik"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            CategoryId = 3,
                            Name = "SahaBt Yazilim"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            CategoryId = 4,
                            Name = "Öztürk Kafe Çay Bahçesi"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 3,
                            CategoryId = 4,
                            Name = "Öztürk Kafe Çay Bahçesi"
                        });
                });

            modelBuilder.Entity("JobForStudents.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Kecioren"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Mamak"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 2,
                            Name = "Bagcılar"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            Name = "Besiktas"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 3,
                            Name = "Karşıyaka"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 3,
                            Name = "Göztepe"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 4,
                            Name = "Izmit"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 4,
                            Name = "Gölcük"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 5,
                            Name = "Sapanca"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 5,
                            Name = "Serdivan"
                        });
                });

            modelBuilder.Entity("JobForStudents.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            BirthDate = new DateTime(2020, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            Gender = 1,
                            Name = "Employer1",
                            PhoneNumber = 5311234567L,
                            Surname = "Emp1"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            BirthDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 2,
                            Gender = 1,
                            Name = "Employer2",
                            PhoneNumber = 5311234567L,
                            Surname = "Emp2"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 3,
                            BirthDate = new DateTime(2022, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 3,
                            Gender = 2,
                            Name = "Employer3",
                            PhoneNumber = 5311234567L,
                            Surname = "Emp3"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 4,
                            BirthDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 4,
                            Gender = 2,
                            Name = "Employer4",
                            PhoneNumber = 5311234567L,
                            Surname = "Emp4"
                        });
                });

            modelBuilder.Entity("JobForStudents.JobAdvertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfPeopleHiring")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WorkingTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployerId");

                    b.ToTable("JobAdvertisements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Description = ".net core bilen yazılım müh arayıyrouz",
                            EmployerId = 1,
                            Name = ".Net Core Developer",
                            NumberOfPeopleHiring = 0,
                            Salary = 10000,
                            Title = "Yazılım Mühendisi",
                            WorkingTime = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = ".net core bilen yazılım müh arayıyrouz",
                            EmployerId = 2,
                            Name = ".Net Developer",
                            NumberOfPeopleHiring = 0,
                            Salary = 8000,
                            Title = "Yazılım Mühendisi",
                            WorkingTime = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = ".net core bilen yazılım müh arayıyrouz",
                            EmployerId = 3,
                            Name = "java Developer",
                            NumberOfPeopleHiring = 0,
                            Salary = 15000,
                            Title = "Yazılım Mühendisi",
                            WorkingTime = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = ".net core bilen yazılım müh arayıyrouz",
                            EmployerId = 1,
                            Name = "react Developer",
                            NumberOfPeopleHiring = 0,
                            Salary = 12000,
                            Title = "Yazılım Mühendisi",
                            WorkingTime = 0
                        });
                });

            modelBuilder.Entity("JobForStudents.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("JobForStudents.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Name = "Zonguldak Bülent Ecevit Üniversitesi"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Name = "Karaelmas Üniversitesi"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Name = "Türk Kızılası Kartal Anadolu Lisesi"
                        });
                });

            modelBuilder.Entity("JobForStudents.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Education")
                        .HasColumnType("int");

                    b.Property<int>("EducationTour")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            AddressId = 1,
                            BirthDate = new DateTime(2020, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = 1,
                            EducationTour = 1,
                            Gender = 1,
                            Name = "Hayri",
                            PhoneNumber = 5311234567L,
                            SchoolId = 1,
                            Surname = "Öztürk"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            AddressId = 2,
                            BirthDate = new DateTime(2021, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = 2,
                            EducationTour = 2,
                            Gender = 1,
                            Name = "Hayri222",
                            PhoneNumber = 11111111111L,
                            SchoolId = 2,
                            Surname = "Öztürk222"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 3,
                            AddressId = 3,
                            BirthDate = new DateTime(2022, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = 3,
                            EducationTour = 1,
                            Gender = 2,
                            Name = "Hayri333",
                            PhoneNumber = 2222222222L,
                            SchoolId = 3,
                            Surname = "Öztürk333"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 4,
                            AddressId = 4,
                            BirthDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = 4,
                            EducationTour = 1,
                            Gender = 2,
                            Name = "Hayri4444",
                            PhoneNumber = 44444444444L,
                            SchoolId = 3,
                            Surname = "Öztürk444"
                        });
                });

            modelBuilder.Entity("JobForStudents.Account", b =>
                {
                    b.HasOne("JobForStudents.Role", "Role")
                        .WithMany("Account")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JobForStudents.Address", b =>
                {
                    b.HasOne("JobForStudents.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobForStudents.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("JobForStudents.Company", b =>
                {
                    b.HasOne("JobForStudents.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobForStudents.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JobForStudents.District", b =>
                {
                    b.HasOne("JobForStudents.City", "City")
                        .WithMany("District")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("JobForStudents.Employer", b =>
                {
                    b.HasOne("JobForStudents.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobForStudents.Company", "Company")
                        .WithMany("Employer")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobForStudents.JobAdvertisement", b =>
                {
                    b.HasOne("JobForStudents.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobForStudents.Employer", "Employer")
                        .WithMany("JobAdvertisement")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobForStudents.School", b =>
                {
                    b.HasOne("JobForStudents.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("JobForStudents.Student", b =>
                {
                    b.HasOne("JobForStudents.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobForStudents.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobForStudents.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("School");
                });

            modelBuilder.Entity("JobForStudents.City", b =>
                {
                    b.Navigation("District");
                });

            modelBuilder.Entity("JobForStudents.Company", b =>
                {
                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobForStudents.Employer", b =>
                {
                    b.Navigation("JobAdvertisement");
                });

            modelBuilder.Entity("JobForStudents.Role", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
